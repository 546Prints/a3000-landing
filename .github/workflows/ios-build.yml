name: Build iOS App (Ad Hoc IPA)

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build:
    runs-on: macos-14

    env:
      PROJECT_DIR: SmartwatchApp
      PROJECT_FILE: SmartwatchApp/SmartwatchApp.xcodeproj
      SCHEME: SmartwatchApp
      CONFIG: Release
      ARCHIVE_PATH: output/App.xcarchive
      EXPORT_PATH: output/export
      BUNDLE_ID: com.546prints.smartwatchapp

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Select Xcode (prefer 16.2, fallback 15.4)
        shell: bash
        run: |
          if [ -d "/Applications/Xcode_16.2.app" ]; then
            sudo xcode-select -s /Applications/Xcode_16.2.app/Contents/Developer
          elif [ -d "/Applications/Xcode_15.4.app" ]; then
            sudo xcode-select -s /Applications/Xcode_15.4.app/Contents/Developer
          fi
          xcodebuild -version

      - name: Install XcodeGen
        run: |
          brew update
          brew install xcodegen

      - name: Generate Xcode project from project.yml
        run: |
          test -f "${{ env.PROJECT_DIR }}/project.yml"
          xcodegen --spec "${{ env.PROJECT_DIR }}/project.yml"
          ls -la "${{ env.PROJECT_DIR }}/SmartwatchApp.xcodeproj"

      # ------------------- Signing assets (from GitHub Secrets) -------------------
      - name: Create keychain & import .p12
        shell: bash
        env:
          P12_BASE64: ${{ secrets.P12_BASE64 }}
          P12_PASSWORD: ${{ secrets.P12_PASSWORD }}
        run: |
          set -euo pipefail
          if [ -z "${P12_BASE64:-}" ] || [ -z "${P12_PASSWORD:-}" ]; then
            echo "Missing P12_BASE64 or P12_PASSWORD secret."; exit 1; fi
          KEYCHAIN="$RUNNER_TEMP/build.keychain-db"; PASS="$(uuidgen)"
          security create-keychain -p "$PASS" "$KEYCHAIN"
          security set-keychain-settings -lut 21600 "$KEYCHAIN"
          security unlock-keychain -p "$PASS" "$KEYCHAIN"
          echo "$P12_BASE64" | base64 --decode > "$RUNNER_TEMP/cert.p12"
          security import "$RUNNER_TEMP/cert.p12" -k "$KEYCHAIN" -P "$P12_PASSWORD" -T /usr/bin/codesign -T /usr/bin/security -A
          security list-keychain -d user -s "$KEYCHAIN" $(security list-keychains -d user | tr -d '"')
          security set-key-partition-list -S apple-tool:,apple: -s -k "$PASS" "$KEYCHAIN"

      - name: Install provisioning profile (Ad Hoc)
        shell: bash
        env:
          MOBILEPROVISION_BASE64: ${{ secrets.MOBILEPROVISION_BASE64 }}
        run: |
          set -euo pipefail
          if [ -z "${MOBILEPROVISION_BASE64:-}" ]; then
            echo "Missing MOBILEPROVISION_BASE64 secret."; exit 1; fi
          mkdir -p "$HOME/Library/MobileDevice/Provisioning Profiles"
          echo "$MOBILEPROVISION_BASE64" | base64 --decode > profile.mobileprovision
          UUID=$(/usr/libexec/PlistBuddy -c 'Print UUID' /dev/stdin <<< "$(security cms -D -i profile.mobileprovision)")
          NAME=$(/usr/libexec/PlistBuddy -c 'Print Name' /dev/stdin <<< "$(security cms -D -i profile.mobileprovision)")
          cp profile.mobileprovision "$HOME/Library/MobileDevice/Provisioning Profiles/$UUID.mobileprovision"
          echo "PROFILE_UUID=$UUID" >> $GITHUB_ENV
          echo "PROFILE_NAME=$NAME" >> $GITHUB_ENV
          echo "Installed profile: $NAME ($UUID)"

      # ------------------- Archive (signed) -------------------
      - name: Archive
        env:
          TEAM_ID: ${{ secrets.TEAM_ID }}
        run: |
          set -e
          mkdir -p output
          xcodebuild \
            -project "${{ env.PROJECT_FILE }}" \
            -scheme "${{ env.SCHEME }}" \
            -configuration "${{ env.CONFIG }}" \
            -sdk iphoneos \
            -destination 'generic/platform=iOS' \
            PRODUCT_BUNDLE_IDENTIFIER="${{ env.BUNDLE_ID }}" \
            DEVELOPMENT_TEAM="$TEAM_ID" \
            CODE_SIGN_STYLE=Manual \
            PROVISIONING_PROFILE_SPECIFIER="${{ env.PROFILE_NAME }}" \
            CODE_SIGNING_ALLOWED=YES CODE_SIGNING_REQUIRED=YES \
            clean archive \
            -archivePath "${{ env.ARCHIVE_PATH }}" | xcpretty || exit ${PIPESTATUS[0]}

      # ------------------- Export signed IPA (Ad Hoc) -------------------
      - name: Write ExportOptions.plist (ad-hoc)
        env:
          TEAM_ID: ${{ secrets.TEAM_ID }}
        run: |
          cat > ExportOptions.plist <<EOF
          <?xml version="1.0" encoding="UTF-8"?>
          <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
          <plist version="1.0">
          <dict>
            <key>method</key><string>ad-hoc</string>
            <key>teamID</key><string>${TEAM_ID}</string>
            <key>signingStyle</key><string>manual</string>
            <key>provisioningProfiles</key>
            <dict>
              <key>${{ env.BUNDLE_ID }}</key>
              <string>${{ env.PROFILE_NAME }}</string>
            </dict>
            <key>stripSwiftSymbols</key><true/>
            <key>compileBitcode</key><false/>
            <key>destination</key><string>export</string>
          </dict>
          </plist>
          EOF
          cat ExportOptions.plist

      - name: Export IPA
        run: |
          xcodebuild -exportArchive \
            -archivePath "${{ env.ARCHIVE_PATH }}" \
            -exportOptionsPlist ExportOptions.plist \
            -exportPath "${{ env.EXPORT_PATH }}" | xcpretty || exit ${PIPESTATUS[0]}
          ls -la "${{ env.EXPORT_PATH }}"

      - name: Upload IPA artifact
        uses: actions/upload-artifact@v4
        with:
          name: SmartwatchApp-AdHoc-IPA
          path: ${{ env.EXPORT_PATH }}/*.ipa
