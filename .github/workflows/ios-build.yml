name: Build iOS App (Unsigned + Ad Hoc)

on:
  workflow_dispatch: {}
  push:
    branches: [ main ]

jobs:
  unsigned:
    name: Build Unsigned .app
    runs-on: macos-14
    timeout-minutes: 30
    env:
      PROJECT_FILE: SmartwatchApp/SmartwatchApp.xcodeproj
      SCHEME: SmartwatchApp
      CONFIGURATION: Release
      SDK: iphoneos

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Select Xcode
        run: |
          if [ -d "/Applications/Xcode_16.2.app" ]; then
            sudo xcode-select -s /Applications/Xcode_16.2.app
          else
            sudo xcode-select -s /Applications/Xcode_15.4.app
          fi

      - name: Build without code signing
        run: |
          mkdir -p output
          xcodebuild \
            -project "${PROJECT_FILE}" \
            -scheme "${SCHEME}" \
            -configuration "${CONFIGURATION}" \
            -sdk "${SDK}" \
            CODE_SIGNING_ALLOWED=NO \
            archive -archivePath output/App.xcarchive

      - name: Package .app as zip
        run: |
          APP_PATH="output/App.xcarchive/Products/Applications/${SCHEME}.app"
          cd "$(dirname "${APP_PATH}")"
          zip -ry "${GITHUB_WORKSPACE}/output/${SCHEME}.zip" "$(basename "${APP_PATH}")"

      - name: Upload unsigned artifact
        uses: actions/upload-artifact@v4
        with:
          name: Unsigned-App
          path: output/${{ env.SCHEME }}.zip


  ad_hoc:
    name: Build Signed Ad Hoc IPA
    runs-on: macos-14
    needs: unsigned
    timeout-minutes: 30
    env:
      PROJECT_FILE: SmartwatchApp/SmartwatchApp.xcodeproj
      SCHEME: SmartwatchApp
      CONFIGURATION: Release
      SDK: iphoneos
      EXPORT_METHOD: ad-hoc

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Select Xcode
        run: |
          if [ -d "/Applications/Xcode_16.2.app" ]; then
            sudo xcode-select -s /Applications/Xcode_16.2.app
          else
            sudo xcode-select -s /Applications/Xcode_15.4.app
          fi

      - name: Create keychain and import .p12
        run: |
          echo "$P12_BASE64" | base64 --decode > certificate.p12
          security create-keychain -p "" build.keychain
          security import certificate.p12 -k ~/Library/Keychains/build.keychain -P "$P12_PASSWORD" -T /usr/bin/codesign
          security list-keychains -s ~/Library/Keychains/build.keychain
          security unlock-keychain -p "" ~/Library/Keychains/build.keychain
        env:
          P12_BASE64: ${{ secrets.P12_BASE64 }}
          P12_PASSWORD: ${{ secrets.P12_PASSWORD }}

      - name: Install provisioning profile
        run: |
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          echo "$PROVISIONING_PROFILE_BASE64" | base64 --decode > profile.mobileprovision
          cp profile.mobileprovision ~/Library/MobileDevice/Provisioning\ Profiles/
        env:
          PROVISIONING_PROFILE_BASE64: ${{ secrets.PROVISIONING_PROFILE_BASE64 }}

      - name: Archive (signed)
        run: |
          mkdir -p output
          xcodebuild \
            -project "${PROJECT_FILE}" \
            -scheme "${SCHEME}" \
            -configuration "${CONFIGURATION}" \
            -sdk "${SDK}" \
            -allowProvisioningUpdates \
            archive -archivePath output/App.xcarchive

      - name: Export IPA
        run: |
          cat > ExportOptions.plist <<EOF
          {
            "method": "${EXPORT_METHOD}",
            "provisioningProfiles": { "com.example.SmartwatchApp": "ProvisioningProfileName" },
            "signingStyle": "manual",
            "compileBitcode": false
          }
          EOF
          xcodebuild \
            -exportArchive \
            -archivePath output/App.xcarchive \
            -exportPath output \
            -exportOptionsPlist ExportOptions.plist

      - name: Upload IPA artifact
        uses: actions/upload-artifact@v4
        with:
          name: Ad-Hoc-IPA
          path: output/*.ipa
