name: Build iOS App (Ad Hoc)

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build:
    runs-on: macos-13   # works with current Apple toolchain on Actions

    env:
      PROJECT_PATH: SmartwatchApp/SmartwatchApp.xcodeproj
      SCHEME: SmartwatchApp
      CONFIGURATION: Release
      ARCHIVE_PATH: output/App.xcarchive
      EXPORT_PATH: output
      # These come from GitHub Secrets:
      TEAM_ID: ${{ secrets.IOS_TEAM_ID }}
      BUNDLE_ID: ${{ secrets.IOS_BUNDLE_ID }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Select Xcode (prefer 16.2, fallback 15.4, else newest)
        shell: bash
        run: |
          set -e
          echo "Available Xcodes:"
          ls -1 /Applications | grep -E '^Xcode' || true

          if [ -d "/Applications/Xcode_16.2.app" ]; then
            DEVELOPER_DIR="/Applications/Xcode_16.2.app/Contents/Developer"
          elif [ -d "/Applications/Xcode_15.4.app" ]; then
            DEVELOPER_DIR="/Applications/Xcode_15.4.app/Contents/Developer"
          else
            # Pick the newest Xcode installed on the image
            LATEST_APP="$(ls -d /Applications/Xcode*.app | sort -V | tail -n1)"
            DEVELOPER_DIR="$LATEST_APP/Contents/Developer"
          fi

          echo "Selecting: $DEVELOPER_DIR"
          sudo xcode-select -s "$DEVELOPER_DIR"
          xcode-select -p
          xcodebuild -version
      # ---------- Install signing assets (certificate + profile) ----------
      - name: Create keychain and import .p12
        shell: bash
        run: |
          KEYCHAIN="$RUNNER_TEMP/build.keychain-db"
          security create-keychain -p "" "$KEYCHAIN"
          security set-keychain-settings "$KEYCHAIN"
          security unlock-keychain -p "" "$KEYCHAIN"
          echo "${{ secrets.IOS_P12_BASE64 }}" | base64 --decode > "$RUNNER_TEMP/cert.p12"
          security import "$RUNNER_TEMP/cert.p12" -k "$KEYCHAIN" -P "${{ secrets.IOS_P12_PASSWORD }}" -T /usr/bin/codesign -A
          security list-keychains -d user -s "$KEYCHAIN"
          security set-key-partition-list -S apple-tool:,apple: -s -k "" "$KEYCHAIN"

      - name: Install provisioning profile
        shell: bash
        run: |
          mkdir -p "$HOME/Library/MobileDevice/Provisioning Profiles"
          echo "${{ secrets.IOS_MOBILEPROVISION_BASE64 }}" | base64 --decode > "$HOME/Library/MobileDevice/Provisioning Profiles/adhoc.mobileprovision"
          ls -la "$HOME/Library/MobileDevice/Provisioning Profiles"

      # ---------- Build & Archive (with signing) ----------
      - name: Archive
        shell: bash
        run: |
          mkdir -p output
          xcodebuild \
            -project "$PROJECT_PATH" \
            -scheme "$SCHEME" \
            -configuration "$CONFIGURATION" \
            -sdk iphoneos \
            -archivePath "$ARCHIVE_PATH" \
            PRODUCT_BUNDLE_IDENTIFIER="$BUNDLE_ID" \
            DEVELOPMENT_TEAM="$TEAM_ID" \
            CODE_SIGN_STYLE=Manual \
            clean archive | xcpretty

      # ---------- Export IPA (Ad Hoc) ----------
      - name: Create ExportOptions.plist (Ad Hoc)
        shell: bash
        run: |
          cat > ExportOptions.plist <<'PLIST'
          <?xml version="1.0" encoding="UTF-8"?>
          <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
          <plist version="1.0">
          <dict>
            <key>method</key>
            <string>ad-hoc</string>
            <key>teamID</key>
            <string>${TEAM_ID}</string>
            <key>signingStyle</key>
            <string>manual</string>
            <key>compileBitcode</key>
            <false/>
            <key>stripSwiftSymbols</key>
            <true/>
            <key>destination</key>
            <string>export</string>
            <key>provisioningProfiles</key>
            <dict>
              <key>${BUNDLE_ID}</key>
              <string>AdHoc</string>
            </dict>
          </dict>
          </plist>
          PLIST

      - name: Export IPA
        shell: bash
        run: |
          xcodebuild -exportArchive \
            -archivePath "$ARCHIVE_PATH" \
            -exportOptionsPlist ExportOptions.plist \
            -exportPath "$EXPORT_PATH" | xcpretty
          ls -la output

      - name: Upload IPA artifact
        uses: actions/upload-artifact@v4
        with:
          name: SmartwatchApp-AdHoc-IPA
          path: output/*.ipa
