name: Build iOS App (unsigned)

on:
  push:
    branches: [ main ]
  workflow_dispatch: {}

jobs:
  build:
    name: build
    runs-on: macos-14
    timeout-minutes: 30

    env:
      # Adjust these if your paths/names differ
      PROJECT_DIR: SmartwatchApp
      PROJECT_FILE: SmartwatchApp/SmartwatchApp.xcodeproj
      SCHEME: SmartwatchApp
      CONFIGURATION: Release
      SDK: iphoneos

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Select Xcode (prefer 16.2, fallback 15.4)
        shell: bash
        run: |
          set -euo pipefail
          if [ -d "/Applications/Xcode_16.2.app" ]; then
            sudo xcode-select -s /Applications/Xcode_16.2.app
          else
            sudo xcode-select -s /Applications/Xcode_15.4.app
          fi
          xcodebuild -version
          xcrun --sdk iphoneos --show-sdk-version

      - name: Debug â€” list files
        shell: bash
        run: |
          set -euo pipefail
          echo "PWD: $(pwd)"
          ls -la
          echo "---- ${PROJECT_DIR} dir ----"
          ls -la "${PROJECT_DIR}" || true
          echo "---- recursive tree ----"
          ls -R "${PROJECT_DIR}" || true

      # If you have SmartwatchApp/project.yml and want to (re)generate the xcodeproj, keep this step.
      # If you do NOT use XcodeGen, you can safely delete this step.
      - name: Install XcodeGen (optional)
        shell: bash
        run: |
          set -euo pipefail
          if ! command -v xcodegen >/dev/null 2>&1; then
            brew update
            brew install xcodegen
          fi
          xcodegen --version

      - name: Generate Xcode project from project.yml (optional)
        if: ${{ hashFiles('SmartwatchApp/project.yml') != '' }}
        shell: bash
        run: |
          set -euo pipefail
          test -f SmartwatchApp/project.yml
          xcodegen generate --spec SmartwatchApp/project.yml
          echo "Generated files:"
          ls -la SmartwatchApp

      - name: List Xcode targets & schemes
        shell: bash
        run: |
          set -euo pipefail
          echo "=== xcodebuild -list (project) ==="
          xcodebuild -list -project "${PROJECT_FILE}" || true

      - name: Build (archive) WITHOUT code signing
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p output
          xcodebuild \
            -project "${PROJECT_FILE}" \
            -scheme "${SCHEME}" \
            -configuration "${CONFIGURATION}" \
            -sdk "${SDK}" \
            CODE_SIGNING_ALLOWED=NO CODE_SIGNING_REQUIRED=NO \
            archive -archivePath output/App.xcarchive

      - name: Package .app (unsigned) as zip
        shell: bash
        run: |
          set -euo pipefail
          APP_PATH="output/App.xcarchive/Products/Applications/${SCHEME}.app"
          if [ ! -d "${APP_PATH}" ]; then
            echo "Could not find app at: ${APP_PATH}"
            exit 1
          fi
          pushd "$(dirname "${APP_PATH}")" >/dev/null
          zip -ry "${GITHUB_WORKSPACE}/output/${SCHEME}.zip" "$(basename "${APP_PATH}")"
          popd >/dev/null
          echo "Zipped app at output/${SCHEME}.zip"

      - name: Upload artifact (.app zip)
        uses: actions/upload-artifact@v4
        with:
          name: unsigned-app-zip
          path: output/${{ env.SCHEME }}.zip
          if-no-files-found: error
